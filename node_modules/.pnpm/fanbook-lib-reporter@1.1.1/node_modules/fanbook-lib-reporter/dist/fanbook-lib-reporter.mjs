import v from "@babel/runtime/helpers/classCallCheck";
import m from "@babel/runtime/helpers/createClass";
import a from "@babel/runtime/helpers/defineProperty";
function h(s, o) {
  var t = Object.keys(s);
  if (Object.getOwnPropertySymbols) {
    var e = Object.getOwnPropertySymbols(s);
    o && (e = e.filter(function(r) {
      return Object.getOwnPropertyDescriptor(s, r).enumerable;
    })), t.push.apply(t, e);
  }
  return t;
}
function c(s) {
  for (var o = 1; o < arguments.length; o++) {
    var t = arguments[o] != null ? arguments[o] : {};
    o % 2 ? h(Object(t), !0).forEach(function(e) {
      a(s, e, t[e]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(s, Object.getOwnPropertyDescriptors(t)) : h(Object(t)).forEach(function(e) {
      Object.defineProperty(s, e, Object.getOwnPropertyDescriptor(t, e));
    });
  }
  return s;
}
var y = "reporter_{{id}}_msg_queue", Q = /* @__PURE__ */ function() {
  function s(o, t) {
    var e = this;
    v(this, s), a(this, "msgQueue", []), a(this, "config", {
      reportInterval: 3e3,
      maxMsgQueueCount: 100,
      reportUrl: "",
      commonMsgFields: {},
      cacheMsg: !0,
      reportCacheOnInit: !0,
      reportOnClose: !0,
      cacheStorage: {
        getCacheMsgQueue: function(n) {
          try {
            var i = localStorage.getItem(n);
            if (i) {
              var u = JSON.parse(i);
              return Promise.resolve(u);
            }
          } catch (g) {
            return console.error(g), Promise.resolve([]);
          }
          return Promise.resolve([]);
        },
        setCacheMsgQueue: function(n, i) {
          return localStorage.setItem(n, JSON.stringify(i)), Promise.resolve();
        }
      }
    }), a(this, "reporterId", void 0), a(this, "reportIntervalId", void 0), this.report = this.report.bind(this), this.reporterId = o, this.setConfig(t), this.config.reportInterval !== 0 && this.startReportInterval(), this.config.cacheMsg && this.config.cacheStorage.getCacheMsgQueue(this.getReportStorageKey()).then(function(r) {
      r instanceof Array && (e.msgQueue = r), e.config.reportCacheOnInit && e.msgQueue.length > 0 && (console.log("[reporter]: start report cache on init"), e.report());
    }), this.config.reportOnClose && window.addEventListener("beforeunload", this.report);
  }
  return m(s, [{
    key: "startReportInterval",
    value: function() {
      this.reportIntervalId = setInterval(this.report, this.config.reportInterval);
    }
  }, {
    key: "stopReportInterval",
    value: function() {
      clearInterval(this.reportIntervalId);
    }
  }, {
    key: "pushMsg",
    value: function(t) {
      var e = c(c({}, this.config.commonMsgFields), t), r = /* @__PURE__ */ new Date(), n = r.getFullYear(), i = ("0" + (r.getMonth() + 1)).slice(-2), u = ("0" + r.getDate()).slice(-2), g = ("0" + r.getHours()).slice(-2), f = ("0" + r.getMinutes()).slice(-2), p = ("0" + r.getSeconds()).slice(-2), l = n + "-" + i + "-" + u + " " + g + ":" + f + ":" + p;
      e = c({
        client_time: l
      }, e), this.config.transformMsg && (e = this.config.transformMsg(e)), this.msgQueue.push(e), this.msgQueue.length >= this.config.maxMsgQueueCount && this.report(), this.config.cacheMsg && this.cacheMsgQueue();
    }
  }, {
    key: "report",
    value: function() {
      var t = this;
      if (!(this.msgQueue.length <= 0))
        if (console.log("[reporter]: start report..."), navigator.sendBeacon) {
          var e = navigator.sendBeacon(this.config.reportUrl, JSON.stringify(this.msgQueue));
          e && (this.msgQueue = []), this.config.cacheMsg && this.cacheMsgQueue();
        } else
          fetch(this.config.reportUrl, {
            method: "POST",
            headers: {
              "Content-Type": "application/json"
            },
            body: JSON.stringify(this.msgQueue)
          }).then(function(r) {
            return r.json();
          }).then(function(r) {
            r.status === 0 && (t.msgQueue = [], t.config.cacheMsg && t.cacheMsgQueue());
          });
    }
  }, {
    key: "getReportStorageKey",
    value: function() {
      return y.replace("{{id}}", this.reporterId);
    }
  }, {
    key: "cacheMsgQueue",
    value: function() {
      this.config.cacheStorage.setCacheMsgQueue(this.getReportStorageKey(), this.msgQueue);
    }
  }, {
    key: "setConfig",
    value: function(t) {
      this.config = c(c({}, this.config), t);
    }
  }]), s;
}();
export {
  Q as Reporter
};
